/*
  consider load factor as 
  terminating condition for 
  generating dungeon.
*/

// dimension of dungeon map.
const width = 100;
const height = 100;
var threshold = 270;

// room types.
const SMALLROOM = { height: 3, width: 3 };
const LARGEROOM = { height: 6, width: 6 };
const VERTCORRIDOR = { height: 10, width: 2 };
const HORIZCORRIDOR = { height: 1, width: 10 };
const typesOfRooms = 4;

// Dungeon map composed of any of the following.
const FULL = 0;       // space that is non occupiable.
const EMPTY = 1;      // space occupiable with nothing there.
const PLAYER = 2;     // where player currently is standing.
const ENEMY = 3;      // where enemy is standing.
const BOSS = 4;       // special case enemy.
const ITEM = 5;       // raises health.
const WEAPON = 6;     // increases attack.

// direction facing wall.
const NORTH = 7;
const SOUTH = 8;
const EAST = 9;
const WEST = 10;

// creates initial dungeon of just full spaces.
function initDungeon(width, height) {
  var map = [];
  for (var i = 0; i < height; i++) {
    var row = [];
    for (var j = 0; j < width; j++) {
      row.push(FULL);
    }
    map.push(row);
  }
  return map;
}

// creates a room at 2d-index of max width and height.
function createRoom(map, type, index, direction) {
  if (direction === NORTH) {
    for (var i = index[0] - 1; i >= index[0] - type.height; i--) {
      for (var j = index[1]; j < index[1] + type.width; j++) {
        map[i][j] = EMPTY;
      }
    }
    return;
  }
  if (direction === EAST) {
    for (var i = index[0]; i < index[0] + type.height; i++) {
      for (var j = index[1] + 1; j <= index[1] + type.width; j++) {
        map[i][j] = EMPTY;
      }
    }
    return;
  }
  if (direction === SOUTH) {
    for (var i = index[0] + 1; i <= index[0] + type.height; i++) {
      for (var j = index[1]; j < index[1] + type.width; j++) {
        map[i][j] = EMPTY;
      }
    }
    return;
  }
  if (direction === WEST) {
    for (var i = index[0]; i < index[0] + type.height; i++) {
      for (var j = index[1] - 1; j >= index[1] - type.width; j--) {
        map[i][j] = EMPTY;
      }
    }
    return;
  }
  return;
}

/* functions to be defined next time */
// randomly selects a type of room.
function decideRoom() {
  var selection = Math.floor(Math.random() * typesOfRooms);
  switch (selection) {
    case 0:
        return SMALLROOM;
    case 1:
        return LARGEROOM;
    case 2:
        return VERTCORRIDOR;
    case 3:
        return HORIZCORRIDOR;
    default:
        return false;
  }
}

// searches for a wall.
function pickWall(map) {
  var i, j;
  do {
    i = Math.floor(Math.random() * map.length);
    j = Math.floor(Math.random() * map[i].length);
  } while (!isWall(map, [i,j]));
  return [i,j];
}

// checks if a new room fits at that index
// this isn't complete, needs to be fixed!
function doesFit(map, type, index, direction) {
  if (direction === NORTH) {
    if (index[0] - type.height >= 0 &&
        index[1] + type.width < map[index[0]].length) {
      for (var i = index[0] - 1; i >= index[0] - type.height; i--) {
        for (var j = index[1]; j < index[1] + type.width; j++) {
          if (map[i][j] != FULL) return false;
        }
      }
    } else {
      return false;
    }
    return true;
  }
  if (direction === EAST) {
    if (index[0] + type.height < map.length &&
        index[1] + type.width < map[index[0]].length) {
      for (var i = index[0]; i < index[0] + type.height; i++) {
        for (var j = index[1] + 1; j <= index[1] + type.width; j++) {
          if (map[i][j] != FULL) return false;
        }
      }
    } else {
      return false;
    }
    return true;
  }
  if (direction === SOUTH) {
    if (index[0] + type.height < map.length &&
        index[1] + type.width < map[index[0]].length) {
      for (var i = index[0] + 1; i <= index[0] + type.height; i++) {
        for (var j = index[1]; j < index[1] + type.width; j++) {
          if (map[i][j] != FULL) return false;
        }
      }
    } else {
      return false;
    }
    return true;
  }
  if (direction === WEST) {
    if (index[0] + type.height < map.length &&
        index[1] - type.width >= 0) {
      for (var i = index[0]; i < index[0] + type.height; i++) {
        for (var j = index[1] - 1; j >= index[1] - type.width; j--) {
          if (map[i][j] != FULL) return false;
        }
      }
    } else {
      return false;
    }
    return true;
  }
  return false;
}

// dungeon generator
function generateDungeon(width, height) {
  // initialize map with EARTH cells.
  var map = initDungeon(width, height);
  
  // create a room with center index.
  var center = [
    Math.floor(map.length/2 - SMALLROOM.height/2 - 1), 
    Math.floor(map[0].length/2 - SMALLROOM.width/2)
  ];
  createRoom(map, SMALLROOM, center, SOUTH);
  // create a new room until threshold is reached.
  var numRooms = 1;
  
  while (numRooms < threshold) {
    var success = false;
    var type, index, direction;
    while (!success) {
      index = pickWall(map);
      direction = getDirection(map, index);
      type = decideRoom();
      if (doesFit(map, type, index, direction))
        success = true;
    }
    createRoom(map, type, index, direction);
    numRooms++;
  }
  
  return map;
}

// determines if current index is a wall.
// wall is defined as any non full space adjacent to a full space.
function isWall(map, index) {
  var i = index[0], j = index[1];
  if (map[i][j] == FULL) return false;
  if (i - 1 >= 0 && map[i -1][j] === FULL)
    return true;
  if (i + 1 < map.length && map[i + 1][j] === FULL) 
    return true;
  if (j + 1 < map[i].length && map[i][j + 1] === FULL)
    return true;
  if (j - 1 >= 0 && map[i][j -1] === FULL)
    return true;
  return false;
}

// determines what direction facing wall.
function getDirection(map, index) {
  var i = index[0];
  var j = index[1];
  if (i - 1 >= 0 && map[i -1][j] === FULL)
    return NORTH;
  if (j - 1 >= 0 && map[i][j - 1] === FULL)
    return WEST;
  if (j + 1 < map[i].length && map[i][j + 1] === FULL)
    return EAST;
  if (i + 1 < map.length && map[i + 1][j] === FULL)
    return SOUTH;
}

// main view of game.
var DungeonView = React.createClass({
  getInitialState: function() {
    return {
      map: generateDungeon(width, height),
      health: 100,
      attack: 7,
      level: 0,
      nextLevel: 60,
      dungeon: 0,
    };
  },
  render: function() {
    return (
      <div className="row">
        <PlayerInfo />
        <Map map={this.state.map}/>
      </div>
    );
  }
});
// end DungeonView.

// shows health, weapon, level, etc.
var PlayerInfo = React.createClass({
  render: function() {
    return (
      <div id="PlayerInfo" className="row">
        <div  className="col-md-8">
          <div className="row">
            <p className="col-md-2">Health: </p>
            <p className="col-md-2">Weapon: </p>
            <p className="col-md-2">Attack: </p>
            <p className="col-md-2">Level: </p>
            <p className="col-md-2">Next Level: </p>
            <p className="col-md-2">Dungeon: </p>
          </div>
        </div>
        <div className="col-md-4">
          <button>Toggle Darkness</button>
        </div>
      </div>
    );
  }
});
// end of PlayerInfo.

// dungeon
var Map = React.createClass({
  render: function() {
    var rows = [];
    for (var i = 0; i < this.props.map.length; i++) {
      var cells = [];
      for (var j = 0; j < this.props.map[i].length; j++) {
        cells.push(<MapCell 
                     cell={this.props.map[i][j]}
                     key={i * j + j}
                     />);
      }
      rows.push(<MapRow cells={cells} key={i}/>);
    }
    return (
      <div className="row">
        <div className="col-xs-12">
          <table id="Map">
            <tbody>
              {rows}
            </tbody>
          </table>
        </div>
      </div>
    );
  }
});
// end of dungeon map.

// row of dungeon cells.
var MapRow = React.createClass({
  render: function() {
    return (
      <tr>{this.props.cells}</tr>
    );
  }
});
// end of row.

// dungeon cell.
var MapCell = React.createClass({
  render: function() {
    var color;
    switch (this.props.cell) {
      case FULL:
        color = '#333';
        break;
      case EMPTY:
        color = '#fff';
        break;
      default:
        color = '#000';
    }
    var css = {backgroundColor: color};
    return (
      <td>
        <div style={css} class="cell"> </div>
      </td>
    );
  }
});
// end of cell.

ReactDOM.render(<DungeonView />, document.getElementById('DungeonView'));